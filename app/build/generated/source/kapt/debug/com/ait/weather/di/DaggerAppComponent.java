// Generated by Dagger (https://google.github.io/dagger).
package com.ait.weather.di;

import androidx.lifecycle.ViewModelProvider;
import com.ait.weather.Repository.ApiCall;
import com.ait.weather.service.WCClient;
import com.ait.weather.weather_climate.WeatherClimateActivity;
import com.ait.weather.weather_climate.WeatherClimateActivity_MembersInjector;
import com.ait.weather.weather_climate.WeatherClimateViewModel;
import com.google.gson.Gson;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

public final class DaggerAppComponent implements AppComponent {
  private AppModule_ProvideApplicationFactory provideApplicationProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Interceptor> provideInterceptorProvider;

  private Provider<OkHttpClient.Builder> provideOkHttpClientProvider;

  private Provider<WCClient> provideRetrofitInstanceProvider;

  private Provider<ApiCall> apiCallProvider;

  private Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {

    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideApplicationProvider = AppModule_ProvideApplicationFactory.create(builder.appModule);
    this.provideGsonProvider =
        DoubleCheck.provider(ApiModule_ProvideGsonFactory.create(builder.apiModule));
    this.provideInterceptorProvider =
        DoubleCheck.provider(ApiModule_ProvideInterceptorFactory.create(builder.apiModule));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            ApiModule_ProvideOkHttpClientFactory.create(
                builder.apiModule, provideInterceptorProvider));
    this.provideRetrofitInstanceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRetrofitInstanceFactory.create(
                builder.apiModule, provideGsonProvider, provideOkHttpClientProvider));
    this.apiCallProvider =
        DoubleCheck.provider(
            ApiModule_ApiCallFactory.create(builder.apiModule, provideRetrofitInstanceProvider));
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactoryModule_ViewModelFactoryFactory.create(
                builder.viewModelFactoryModule, provideApplicationProvider, apiCallProvider));
  }

  @Override
  public void inject(WeatherClimateActivity activity) {
    injectWeatherClimateActivity(activity);
  }

  @Override
  public void inject(WeatherClimateViewModel weatherClimateViewModel) {}

  private WeatherClimateActivity injectWeatherClimateActivity(WeatherClimateActivity instance) {
    WeatherClimateActivity_MembersInjector.injectViewModelFactory(
        instance, viewModelFactoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private ViewModelFactoryModule viewModelFactoryModule;

    private AppModule appModule;

    private ApiModule apiModule;

    private Builder() {}

    public AppComponent build() {
      if (viewModelFactoryModule == null) {
        this.viewModelFactoryModule = new ViewModelFactoryModule();
      }
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      Preconditions.checkBuilderRequirement(apiModule, ApiModule.class);
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder viewModelFactoryModule(ViewModelFactoryModule viewModelFactoryModule) {
      this.viewModelFactoryModule = Preconditions.checkNotNull(viewModelFactoryModule);
      return this;
    }
  }
}
