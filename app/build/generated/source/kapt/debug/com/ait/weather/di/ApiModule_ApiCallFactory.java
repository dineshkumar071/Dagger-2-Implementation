// Generated by Dagger (https://google.github.io/dagger).
package com.ait.weather.di;

import com.ait.weather.Repository.ApiCall;
import com.ait.weather.service.WCClient;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ApiModule_ApiCallFactory implements Factory<ApiCall> {
  private final ApiModule module;

  private final Provider<WCClient> clientProvider;

  public ApiModule_ApiCallFactory(ApiModule module, Provider<WCClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public ApiCall get() {
    return provideInstance(module, clientProvider);
  }

  public static ApiCall provideInstance(ApiModule module, Provider<WCClient> clientProvider) {
    return proxyApiCall(module, clientProvider.get());
  }

  public static ApiModule_ApiCallFactory create(
      ApiModule module, Provider<WCClient> clientProvider) {
    return new ApiModule_ApiCallFactory(module, clientProvider);
  }

  public static ApiCall proxyApiCall(ApiModule instance, WCClient client) {
    return Preconditions.checkNotNull(
        instance.apiCall(client), "Cannot return null from a non-@Nullable @Provides method");
  }
}
